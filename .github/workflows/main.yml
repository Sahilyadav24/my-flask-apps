name: Flask CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests (if any)
      run: |
        # Here you can run any tests. If none, this step can be skipped.
        pytest  # Assuming you have pytest set up

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}  # The URL will be set dynamically

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Elastic Beanstalk
      run: |
        # Package the app for Elastic Beanstalk
        zip -r flask-app.zip .
        
        # Use AWS EB CLI to deploy to Elastic Beanstalk
        eb init -p python-3.7 flask-app --region ${{ secrets.AWS_REGION }}
        
        # Check if the environment exists; if not, create it
        eb create flask-app-env --region ${{ secrets.AWS_REGION }} --tier web
        
        # Deploy the app to Elastic Beanstalk
        eb deploy
        
        # Capture the Elastic Beanstalk environment URL
        EB_URL=$(eb open --no-verify-ssl | grep -o 'http[^ ]*')
        echo "Elastic Beanstalk Environment URL: $EB_URL"

    - name: Output URL (for tracking)
      id: deploy
      run: echo "URL: $EB_URL"
